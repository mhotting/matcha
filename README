UPDATE:
  - Normalement, la base des interactions est gérée (le reste, ce sera à l'usage);
  - J'ai retiré les dislike parce que c'était couillon;
  - J'ai crée une table de match qui s'update automatiquement quand deux users se likent ou ne se likent plus;
  - J'ai fait en sorte que la table des visites ait un compteur qui augmentera à chaque visite;

Pour utiliser les interactions:
  - Il faut le header authorization pour qu'on soit sûr qu'on est connecté;
  - Il faut envoyer un JSON avec des requêtes PUT ou DELETE au format suivant:
        {
          "userId": ...,
          "otherId": ...
        }
  - userId c'est pour le user courant et otherId pour la "cible";

DIVERS:
  - Appremment, il existe un mécanisme pour que les tokens se refresh tous seuls mais je
  n'ai pas pris le temps de regarder.
  J'ai un lien conseillé par Max lui-même:
        https://solidgeargroup.com/refresh-token-with-jwt-authentication-node-js
  - Il faudra qu'on voit pour les notifications si on ajoute des entrées dans la DB
  ou si on ne fait rien pour le moment;
  - J'ai laissé des retours JSON en Anglais et ça chie un peu parce que le reste est en Français,
  je les corrigerai;
  - J'ai commenté certains trucs qui ne l'étaient pas au cas où on en aurait besoin;
  - J'ai passé un coup de ESlint sur nos fichiers pour la mise en forme;
  - J'ai changé les routes mais si ça te plaît pas on remettra comme tu avais mis;
  
  Et voilà, un nouveau roman!

--------------------------------------------------------------------

J'ai pris note de tout ce que t'avais fait. Bon boulot !
Tous les commentaires c'est top.

J'ai check le modèle pour les interactions. Je pense qu'on gagnerait en clarté si on séparait
les requêtes. Ex : SELECT report_id... on fait une méthode getReportID, pareil pour les matchs etc...
Peut être qu'il serait intéressant de séparer le model en deux, match/like d'un côté et report/block de l'autre.
J'aurais même tendance à faire : une méthode = une requête SQL écrit en plain text.

On devrait aussi fixer une norme, pour qu'on code de la même manière: les commentaires, les requêtes SQL,
la longueur des lignes, histoire d'avoir quelque chose d'un peu plus propre.

Un moment tu retournes ' Promise.resolve('No Match Yet') ', il me semble que tu peux retourner directement 'Not Match Yet'.

Et enfin le code d'erreur 422, me semble pas le plus approprié, parce que de mon point de vue, on a pas affaire à un utilisateur 
qui renseigne mal un formulaire.

Ça reste que des idées, dis moi ce que t'en penses bien sûr.

De mon côté j'ai mis 4 lignes à jour sur le code, des détails.
Je continue le reactjs, mais je t'avoue que j'ai pas beaucoup avancé depuis que je m'y suis mis. Je compte faire ca aujourd'hui.

Je pense que je vais décaler mon weekend en semaine, histoire de bosser du jeudi au lundi et avoir donc mardi-mercredi en "weekend". 
Je reviendrai donc que jeudi certainement, mais d'ici la je vais bien bosser sur react. 

Sur ce, je te souhaite une excellente journée, may the force be with you.

(est ce qu'on fait un discord ?)

